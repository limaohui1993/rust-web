{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1","program":"/Users/limaohui/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","minimal_lexical","--edition=2018","/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=d85e8c647cfe4477","-C","extra-filename=-d85e8c647cfe4477","--out-dir","/Users/limaohui/rust/rust-web/db/target/rls/debug/deps","-L","dependency=/Users/limaohui/rust/rust-web/db/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/limaohui/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/limaohui/rust/rust-web/db/target/rls/debug/deps/libminimal_lexical-d85e8c647cfe4477.rmeta"},"prelude":{"crate_id":{"name":"minimal_lexical","disambiguator":[11677694258661104704,0]},"crate_root":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src","external_crates":[{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5737620048972976797,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","num":2,"id":{"name":"core","disambiguator":[2242199718071837415,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2188212999151601010,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1020664553731942337,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5221923779696816614,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10454403582981253701,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7392107620293427149,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9383090470819858406,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13561338507145107503,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2153887466384468734,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11638676648589799525,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17336646944492823354,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16179365956064936006,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[2085897901681677768,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4724748409658749452,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13513626471981952824,0]}},{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14681960900203760207,0]}}],"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":0,"byte_end":1989,"line_start":1,"line_end":68,"column_start":1,"column_end":34}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table.rs","byte_start":147103,"byte_end":147104,"line_start":9,"line_end":9,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"POWER_OF_FIVE_128, SMALLEST_POWER_OF_FIVE, LARGEST_POWER_OF_FIVE","parent":{"krate":0,"index":405}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table.rs","byte_start":147167,"byte_end":147168,"line_start":11,"line_end":11,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"SMALL_F64_POW10, LARGE_POW5_STEP, SMALL_F32_POW10, SMALL_INT_POW5, LARGE_POW5, SMALL_INT_POW10","parent":{"krate":0,"index":405}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1949,"byte_end":1954,"line_start":67,"line_end":67,"column_start":20,"column_end":25},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1977,"byte_end":1988,"line_start":68,"line_end":68,"column_start":22,"column_end":33},"alias_span":null,"name":"parse_float","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":0,"byte_end":1989,"line_start":1,"line_end":68,"column_start":1,"column_end":34},"name":"","qualname":"::","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":79},{"krate":0,"index":85},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":216},{"krate":0,"index":225},{"krate":0,"index":262},{"krate":0,"index":282},{"krate":0,"index":345},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":412},{"krate":0,"index":424},{"krate":0,"index":427}],"decl_id":null,"docs":" Fast, minimal float-parsing algorithm.","sig":null,"attributes":[{"value":"/ Fast, minimal float-parsing algorithm.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":0,"byte_end":42,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":43,"byte_end":46,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ minimal-lexical has a simple, high-level API with a single","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":47,"byte_end":109,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/ exported function: [`parse_float`].","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":110,"byte_end":149,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":150,"byte_end":153,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [`parse_float`] expects a forward iterator for the integer","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":154,"byte_end":216,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/ and fraction digits, as well as a parsed exponent as an [`i32`].","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":217,"byte_end":285,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":286,"byte_end":289,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For more examples, please see [simple-example](https://github.com/Alexhuszagh/minimal-lexical/blob/master/examples/simple.rs).","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":290,"byte_end":420,"line_start":9,"line_end":9,"column_start":1,"column_end":131}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":421,"byte_end":424,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ EXAMPLES","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":425,"byte_end":437,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/ --------","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":438,"byte_end":450,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":451,"byte_end":454,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":455,"byte_end":462,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ extern crate minimal_lexical;","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":463,"byte_end":496,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":497,"byte_end":500,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // Let's say we want to parse \"1.2345\".","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":501,"byte_end":544,"line_start":17,"line_end":17,"column_start":1,"column_end":44}},{"value":"/ // First, we need an external parser to extract the integer digits (\"1\"),","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":545,"byte_end":622,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ // the fraction digits (\"2345\"), and then parse the exponent to a 32-bit","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":623,"byte_end":699,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ // integer (0).","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":700,"byte_end":719,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ // Warning:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":720,"byte_end":735,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ // --------","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":736,"byte_end":751,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ //  Please note that leading zeros must be trimmed from the integer,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":752,"byte_end":824,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ //  and trailing zeros must be trimmed from the fraction. This cannot","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":825,"byte_end":898,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ //  be handled by minimal-lexical, since we accept iterators.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":899,"byte_end":964,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ let integer = b\"1\";","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":965,"byte_end":988,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ let fraction = b\"2345\";","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":989,"byte_end":1016,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/ let float: f64 = minimal_lexical::parse_float(integer.iter(), fraction.iter(), 0);","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1017,"byte_end":1103,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/ println!(\"float={:?}\", float);    // 1.235","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1104,"byte_end":1150,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1151,"byte_end":1158,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1159,"byte_end":1162,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ [`parse_float`]: fn.parse_float.html","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1163,"byte_end":1203,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/ [`i32`]: https://doc.rust-lang.org/stable/std/primitive.i32.html","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1204,"byte_end":1272,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1415,"byte_end":1439,"line_start":39,"line_end":39,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bigint","qualname":"::bigint","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":" A simple big-integer type for slow path algorithms.","sig":null,"attributes":[{"value":"/ A simple big-integer type for slow path algorithms.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":15642,"byte_end":15697,"line_start":1,"line_end":1,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":15698,"byte_end":15701,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This includes minimal stackvector for use in big-integer arithmetic.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":15702,"byte_end":15774,"line_start":3,"line_end":3,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16240,"byte_end":16251,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"BIGINT_BITS","qualname":"::bigint::BIGINT_BITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bits in a Bigint.","sig":null,"attributes":[{"value":"/ Number of bits in a Bigint.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16043,"byte_end":16074,"line_start":16,"line_end":16,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16075,"byte_end":16078,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This needs to be at least the number of bits required to store","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16079,"byte_end":16145,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ a Bigint, which is `log2(radix**digits)`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16146,"byte_end":16191,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/ ≅ 3600 for base-10, rounded-up.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16192,"byte_end":16229,"line_start":20,"line_end":20,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16318,"byte_end":16330,"line_start":24,"line_end":24,"column_start":11,"column_end":23},"name":"BIGINT_LIMBS","qualname":"::bigint::BIGINT_LIMBS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The number of limbs for the bigint.\n","sig":null,"attributes":[{"value":"/ The number of limbs for the bigint.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16268,"byte_end":16307,"line_start":23,"line_end":23,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16461,"byte_end":16468,"line_start":30,"line_end":30,"column_start":10,"column_end":17},"name":"VecType","qualname":"::bigint::VecType","value":"StackVec","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"alloc\"))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16421,"byte_end":16451,"line_start":29,"line_end":29,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":430},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16959,"byte_end":16965,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"Bigint","qualname":"::bigint::Bigint","value":"Bigint { data }","parent":null,"children":[{"krate":0,"index":431}],"decl_id":null,"docs":" Storage for a big integer type.","sig":null,"attributes":[{"value":"/ Storage for a big integer type.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16482,"byte_end":16517,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16518,"byte_end":16521,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This is used for algorithms when we have a finite number of digits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16522,"byte_end":16593,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ Specifically, it stores all the significant digits scaled to the","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16594,"byte_end":16662,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/ proper exponent, as an integral type, and then directly compares","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16663,"byte_end":16731,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/ these digits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16732,"byte_end":16749,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16750,"byte_end":16753,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This requires us to store the number of significant bits, plus the","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16754,"byte_end":16824,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ number of exponent bits (required) since we scale everything","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16825,"byte_end":16889,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ to the same exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16890,"byte_end":16915,"line_start":41,"line_end":41,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":431},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17762,"byte_end":17766,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"data","qualname":"::bigint::Bigint::data","value":"stackvec::StackVec","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Significant digits for the float, stored in a big integer in LE order.","sig":null,"attributes":[{"value":"/ Significant digits for the float, stored in a big integer in LE order.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":16972,"byte_end":17046,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17051,"byte_end":17054,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is pretty much the same number of digits for any radix, since the","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17059,"byte_end":17133,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/  significant digits balances out the zeros from the exponent:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17138,"byte_end":17203,"line_start":47,"line_end":47,"column_start":5,"column_end":70}},{"value":"/     1. Decimal is 1091 digits, 767 mantissa digits + 324 exponent zeros.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17208,"byte_end":17284,"line_start":48,"line_end":48,"column_start":5,"column_end":81}},{"value":"/     2. Base 6 is 1097 digits, or 680 mantissa digits + 417 exponent zeros.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17289,"byte_end":17367,"line_start":49,"line_end":49,"column_start":5,"column_end":83}},{"value":"/     3. Base 36 is 1086 digits, or 877 mantissa digits + 209 exponent zeros.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17372,"byte_end":17451,"line_start":50,"line_end":50,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17456,"byte_end":17459,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ However, the number of bytes required is larger for large radixes:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17464,"byte_end":17534,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ for decimal, we need `log2(10**1091) ≅ 3600`, while for base 36","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17539,"byte_end":17608,"line_start":53,"line_end":53,"column_start":5,"column_end":72}},{"value":"/ we need `log2(36**1086) ≅ 5600`. Since we use uninitialized data,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17613,"byte_end":17684,"line_start":54,"line_end":54,"column_start":5,"column_end":74}},{"value":"/ we avoid a major performance hit from the large buffer size.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17689,"byte_end":17753,"line_start":55,"line_end":55,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17908,"byte_end":17911,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<Bigint>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a bigint representing 0.\n","sig":null,"attributes":[{"value":"/ Construct a bigint representing 0.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17836,"byte_end":17874,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17879,"byte_end":17896,"line_start":62,"line_end":62,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18067,"byte_end":18075,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<Bigint>::from_u64","value":"pub fn from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a bigint from an integer.\n","sig":null,"attributes":[{"value":"/ Construct a bigint from an integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17994,"byte_end":18033,"line_start":69,"line_end":69,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18038,"byte_end":18055,"line_start":70,"line_end":70,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18207,"byte_end":18211,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"hi64","qualname":"<Bigint>::hi64","value":"pub fn hi64(&Self) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18178,"byte_end":18195,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18357,"byte_end":18360,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"pow","qualname":"<Bigint>::pow","value":"pub fn pow(&mut Self, u32, u32) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Multiply and assign as if by exponentiation by a power.\n","sig":null,"attributes":[{"value":"/ Multiply and assign as if by exponentiation by a power.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18272,"byte_end":18331,"line_start":82,"line_end":82,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18336,"byte_end":18345,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18733,"byte_end":18743,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"bit_length","qualname":"<Bigint>::bit_length","value":"pub fn bit_length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the bit-length of the big-integer.\n","sig":null,"attributes":[{"value":"/ Calculate the bit-length of the big-integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18659,"byte_end":18707,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18712,"byte_end":18721,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19000,"byte_end":19011,"line_start":111,"line_end":111,"column_start":12,"column_end":23},"name":"ReverseView","qualname":"::bigint::ReverseView","value":"ReverseView {  }","parent":null,"children":[{"krate":0,"index":41}],"decl_id":null,"docs":" REVERSE VIEW\n Reverse, immutable view of a sequence.\n","sig":null,"attributes":[{"value":"/ REVERSE VIEW","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18928,"byte_end":18944,"line_start":108,"line_end":108,"column_start":1,"column_end":17}},{"value":"/ Reverse, immutable view of a sequence.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18946,"byte_end":18988,"line_start":110,"line_end":110,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19337,"byte_end":19342,"line_start":127,"line_end":127,"column_start":8,"column_end":13},"name":"rview","qualname":"::bigint::rview","value":"pub fn rview(&[Limb]) -> ReverseView<, Limb>","parent":null,"children":[],"decl_id":null,"docs":" Create a reverse view of the vector for indexing.\n","sig":null,"attributes":[{"value":"/ Create a reverse view of the vector for indexing.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19266,"byte_end":19319,"line_start":125,"line_end":125,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19320,"byte_end":19329,"line_start":126,"line_end":126,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19511,"byte_end":19518,"line_start":138,"line_end":138,"column_start":8,"column_end":15},"name":"compare","qualname":"::bigint::compare","value":"pub fn compare(&[Limb], &[Limb]) -> cmp::Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare `x` to `y`, in little-endian order.\n","sig":null,"attributes":[{"value":"/ Compare `x` to `y`, in little-endian order.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19446,"byte_end":19493,"line_start":136,"line_end":136,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19494,"byte_end":19503,"line_start":137,"line_end":137,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20090,"byte_end":20099,"line_start":160,"line_end":160,"column_start":8,"column_end":17},"name":"normalize","qualname":"::bigint::normalize","value":"pub fn normalize(&mut VecType)","parent":null,"children":[],"decl_id":null,"docs":" Normalize the integer, so any leading zero values are removed.\n","sig":null,"attributes":[{"value":"/ Normalize the integer, so any leading zero values are removed.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20006,"byte_end":20072,"line_start":158,"line_end":158,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20073,"byte_end":20082,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20474,"byte_end":20487,"line_start":174,"line_end":174,"column_start":8,"column_end":21},"name":"is_normalized","qualname":"::bigint::is_normalized","value":"pub fn is_normalized(&[Limb]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get if the big integer is normalized.\n","sig":null,"attributes":[{"value":"/ Get if the big integer is normalized.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20372,"byte_end":20413,"line_start":171,"line_end":171,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20414,"byte_end":20423,"line_start":172,"line_end":172,"column_start":1,"column_end":10}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20424,"byte_end":20466,"line_start":173,"line_end":173,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20791,"byte_end":20799,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::bigint::from_u64","value":"pub fn from_u64(u64) -> VecType","parent":null,"children":[],"decl_id":null,"docs":" Create StackVec from u64 value.\n","sig":null,"attributes":[{"value":"/ Create StackVec from u64 value.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20690,"byte_end":20725,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20726,"byte_end":20743,"line_start":186,"line_end":186,"column_start":1,"column_end":18}},{"value":"allow(clippy :: branches_sharing_code)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":20744,"byte_end":20783,"line_start":187,"line_end":187,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21250,"byte_end":21257,"line_start":210,"line_end":210,"column_start":8,"column_end":15},"name":"nonzero","qualname":"::bigint::nonzero","value":"pub fn nonzero(&[Limb], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if any of the remaining bits are non-zero.","sig":null,"attributes":[{"value":"/ Check if any of the remaining bits are non-zero.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21118,"byte_end":21170,"line_start":204,"line_end":204,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21171,"byte_end":21174,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21175,"byte_end":21187,"line_start":206,"line_end":206,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21188,"byte_end":21191,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ Safe as long as `rindex <= x.len()`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21192,"byte_end":21232,"line_start":208,"line_end":208,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21233,"byte_end":21242,"line_start":209,"line_end":209,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21556,"byte_end":21569,"line_start":222,"line_end":222,"column_start":8,"column_end":21},"name":"u32_to_hi64_1","qualname":"::bigint::u32_to_hi64_1","value":"pub fn u32_to_hi64_1(u32) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 32-bit integer to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 32-bit integer to high 64-bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21497,"byte_end":21538,"line_start":220,"line_end":220,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21539,"byte_end":21548,"line_start":221,"line_end":221,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21690,"byte_end":21703,"line_start":228,"line_end":228,"column_start":8,"column_end":21},"name":"u32_to_hi64_2","qualname":"::bigint::u32_to_hi64_2","value":"pub fn u32_to_hi64_2(u32, u32) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 2 32-bit integers to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 2 32-bit integers to high 64-bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21628,"byte_end":21672,"line_start":226,"line_end":226,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21673,"byte_end":21682,"line_start":227,"line_end":227,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21887,"byte_end":21900,"line_start":236,"line_end":236,"column_start":8,"column_end":21},"name":"u32_to_hi64_3","qualname":"::bigint::u32_to_hi64_3","value":"pub fn u32_to_hi64_3(u32, u32, u32) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 3 32-bit integers to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 3 32-bit integers to high 64-bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21825,"byte_end":21869,"line_start":234,"line_end":234,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":21870,"byte_end":21879,"line_start":235,"line_end":235,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":22118,"byte_end":22131,"line_start":245,"line_end":245,"column_start":8,"column_end":21},"name":"u64_to_hi64_1","qualname":"::bigint::u64_to_hi64_1","value":"pub fn u64_to_hi64_1(u64) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 64-bit integer to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 64-bit integer to high 64-bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":22059,"byte_end":22100,"line_start":243,"line_end":243,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":22101,"byte_end":22110,"line_start":244,"line_end":244,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":22278,"byte_end":22291,"line_start":252,"line_end":252,"column_start":8,"column_end":21},"name":"u64_to_hi64_2","qualname":"::bigint::u64_to_hi64_2","value":"pub fn u64_to_hi64_2(u64, u64) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 2 64-bit integers to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 2 64-bit integers to high 64-bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":22216,"byte_end":22260,"line_start":250,"line_end":250,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":22261,"byte_end":22270,"line_start":251,"line_end":251,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":23792,"byte_end":23796,"line_start":310,"line_end":310,"column_start":8,"column_end":12},"name":"hi64","qualname":"::bigint::hi64","value":"pub fn hi64(&[Limb]) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Get the high 64 bits from the vector.\n","sig":null,"attributes":[{"value":"/ Get the high 64 bits from the vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":23725,"byte_end":23766,"line_start":308,"line_end":308,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":23767,"byte_end":23784,"line_start":309,"line_end":309,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26522,"byte_end":26525,"line_start":373,"line_end":373,"column_start":8,"column_end":11},"name":"pow","qualname":"::bigint::pow","value":"pub fn pow(&mut VecType, u32) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" MulAssign by a power of 5.","sig":null,"attributes":[{"value":"/ MulAssign by a power of 5.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24359,"byte_end":24389,"line_start":327,"line_end":327,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24390,"byte_end":24393,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ Theoretically...","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24394,"byte_end":24414,"line_start":329,"line_end":329,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24415,"byte_end":24418,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ Use an exponentiation by squaring method, since it reduces the time","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24419,"byte_end":24490,"line_start":331,"line_end":331,"column_start":1,"column_end":72}},{"value":"/ complexity of the multiplication to ~`O(log(n))` for the squaring,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24491,"byte_end":24561,"line_start":332,"line_end":332,"column_start":1,"column_end":71}},{"value":"/ and `O(n*m)` for the result. Since `m` is typically a lower-order","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24562,"byte_end":24631,"line_start":333,"line_end":333,"column_start":1,"column_end":70}},{"value":"/ factor, this significantly reduces the number of multiplications","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24632,"byte_end":24700,"line_start":334,"line_end":334,"column_start":1,"column_end":69}},{"value":"/ we need to do. Iteratively multiplying by small powers follows","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24701,"byte_end":24767,"line_start":335,"line_end":335,"column_start":1,"column_end":67}},{"value":"/ the nth triangular number series, which scales as `O(p^2)`, but","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24768,"byte_end":24835,"line_start":336,"line_end":336,"column_start":1,"column_end":68}},{"value":"/ where `p` is `n+m`. In short, it scales very poorly.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24836,"byte_end":24892,"line_start":337,"line_end":337,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24893,"byte_end":24896,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Practically....","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24897,"byte_end":24916,"line_start":339,"line_end":339,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24917,"byte_end":24920,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ Exponentiation by Squaring:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24921,"byte_end":24952,"line_start":341,"line_end":341,"column_start":1,"column_end":32}},{"value":"/     running 2 tests","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24953,"byte_end":24976,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/     test bigcomp_f32_lexical ... bench:       1,018 ns/iter (+/- 78)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":24977,"byte_end":25049,"line_start":343,"line_end":343,"column_start":1,"column_end":73}},{"value":"/     test bigcomp_f64_lexical ... bench:       3,639 ns/iter (+/- 1,007)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25050,"byte_end":25125,"line_start":344,"line_end":344,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25126,"byte_end":25129,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ Exponentiation by Iterative Small Powers:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25130,"byte_end":25175,"line_start":346,"line_end":346,"column_start":1,"column_end":46}},{"value":"/     running 2 tests","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25176,"byte_end":25199,"line_start":347,"line_end":347,"column_start":1,"column_end":24}},{"value":"/     test bigcomp_f32_lexical ... bench:         518 ns/iter (+/- 31)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25200,"byte_end":25272,"line_start":348,"line_end":348,"column_start":1,"column_end":73}},{"value":"/     test bigcomp_f64_lexical ... bench:         583 ns/iter (+/- 47)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25273,"byte_end":25345,"line_start":349,"line_end":349,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25346,"byte_end":25349,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ Exponentiation by Iterative Large Powers (of 2):","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25350,"byte_end":25402,"line_start":351,"line_end":351,"column_start":1,"column_end":53}},{"value":"/     running 2 tests","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25403,"byte_end":25426,"line_start":352,"line_end":352,"column_start":1,"column_end":24}},{"value":"/     test bigcomp_f32_lexical ... bench:         671 ns/iter (+/- 31)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25427,"byte_end":25499,"line_start":353,"line_end":353,"column_start":1,"column_end":73}},{"value":"/     test bigcomp_f64_lexical ... bench:       1,394 ns/iter (+/- 47)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25500,"byte_end":25572,"line_start":354,"line_end":354,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25573,"byte_end":25576,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ The following benchmarks were run on `1 * 5^300`, using native `pow`,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25577,"byte_end":25650,"line_start":356,"line_end":356,"column_start":1,"column_end":74}},{"value":"/ a version with only small powers, and one with pre-computed powers","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25651,"byte_end":25721,"line_start":357,"line_end":357,"column_start":1,"column_end":71}},{"value":"/ of `5^(3 * max_exp)`, rather than `5^(5 * max_exp)`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25722,"byte_end":25778,"line_start":358,"line_end":358,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25779,"byte_end":25782,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ However, using large powers is crucial for good performance for higher","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25783,"byte_end":25857,"line_start":360,"line_end":360,"column_start":1,"column_end":75}},{"value":"/ powers.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25858,"byte_end":25869,"line_start":361,"line_end":361,"column_start":1,"column_end":12}},{"value":"/     pow/default             time:   [426.20 ns 427.96 ns 429.89 ns]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25870,"byte_end":25941,"line_start":362,"line_end":362,"column_start":1,"column_end":72}},{"value":"/     pow/small               time:   [2.9270 us 2.9411 us 2.9565 us]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":25942,"byte_end":26013,"line_start":363,"line_end":363,"column_start":1,"column_end":72}},{"value":"/     pow/large:3             time:   [838.51 ns 842.21 ns 846.27 ns]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26014,"byte_end":26085,"line_start":364,"line_end":364,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26086,"byte_end":26089,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ Even using worst-case scenarios, exponentiation by squaring is","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26090,"byte_end":26156,"line_start":366,"line_end":366,"column_start":1,"column_end":67}},{"value":"/ significantly slower for our workloads. Just multiply by small powers,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26157,"byte_end":26231,"line_start":367,"line_end":367,"column_start":1,"column_end":75}},{"value":"/ in simple cases, and use precalculated large powers in other cases.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26232,"byte_end":26303,"line_start":368,"line_end":368,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26304,"byte_end":26307,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ Furthermore, using sufficiently big large powers is also crucial for","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26308,"byte_end":26380,"line_start":370,"line_end":370,"column_start":1,"column_end":73}},{"value":"/ performance. This is a tradeoff of binary size and performance, and","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26381,"byte_end":26452,"line_start":371,"line_end":371,"column_start":1,"column_end":72}},{"value":"/ using a single value at ~`5^(5 * max_exp)` seems optimal.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":26453,"byte_end":26514,"line_start":372,"line_end":372,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27547,"byte_end":27557,"line_start":409,"line_end":409,"column_start":8,"column_end":18},"name":"scalar_add","qualname":"::bigint::scalar_add","value":"pub fn scalar_add(Limb, Limb) -> (Limb, bool)","parent":null,"children":[],"decl_id":null,"docs":" Add two small integers and return the resulting value and if overflow happens.\n","sig":null,"attributes":[{"value":"/ Add two small integers and return the resulting value and if overflow happens.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27439,"byte_end":27521,"line_start":407,"line_end":407,"column_start":1,"column_end":83}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27522,"byte_end":27539,"line_start":408,"line_end":408,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27776,"byte_end":27786,"line_start":417,"line_end":417,"column_start":8,"column_end":18},"name":"scalar_mul","qualname":"::bigint::scalar_mul","value":"pub fn scalar_mul(Limb, Limb, Limb) -> (Limb, Limb)","parent":null,"children":[],"decl_id":null,"docs":" Multiply two small integers (with carry) (and return the overflow contribution).","sig":null,"attributes":[{"value":"/ Multiply two small integers (with carry) (and return the overflow contribution).","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27622,"byte_end":27706,"line_start":413,"line_end":413,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27707,"byte_end":27710,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ Returns the (low, high) components.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27711,"byte_end":27750,"line_start":415,"line_end":415,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":27751,"byte_end":27768,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28206,"byte_end":28220,"line_start":430,"line_end":430,"column_start":8,"column_end":22},"name":"small_add_from","qualname":"::bigint::small_add_from","value":"pub fn small_add_from(&mut VecType, Limb, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add small integer to bigint starting from offset.\n","sig":null,"attributes":[{"value":"/ Add small integer to bigint starting from offset.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28135,"byte_end":28188,"line_start":428,"line_end":428,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28189,"byte_end":28198,"line_start":429,"line_end":429,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28710,"byte_end":28719,"line_start":448,"line_end":448,"column_start":8,"column_end":17},"name":"small_add","qualname":"::bigint::small_add","value":"pub fn small_add(&mut VecType, Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add small integer to bigint.\n","sig":null,"attributes":[{"value":"/ Add small integer to bigint.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28652,"byte_end":28684,"line_start":446,"line_end":446,"column_start":1,"column_end":33}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28685,"byte_end":28702,"line_start":447,"line_end":447,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28848,"byte_end":28857,"line_start":454,"line_end":454,"column_start":8,"column_end":17},"name":"small_mul","qualname":"::bigint::small_mul","value":"pub fn small_mul(&mut VecType, Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Multiply bigint by small integer.\n","sig":null,"attributes":[{"value":"/ Multiply bigint by small integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28793,"byte_end":28830,"line_start":452,"line_end":452,"column_start":1,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":28831,"byte_end":28840,"line_start":453,"line_end":453,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":29273,"byte_end":29287,"line_start":472,"line_end":472,"column_start":8,"column_end":22},"name":"large_add_from","qualname":"::bigint::large_add_from","value":"pub fn large_add_from(&mut VecType, &[Limb], usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add bigint to bigint starting from offset.\n","sig":null,"attributes":[{"value":"/ Add bigint to bigint starting from offset.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":29219,"byte_end":29265,"line_start":471,"line_end":471,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30607,"byte_end":30616,"line_start":511,"line_end":511,"column_start":8,"column_end":17},"name":"large_add","qualname":"::bigint::large_add","value":"pub fn large_add(&mut VecType, &[Limb]) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add bigint to bigint.\n","sig":null,"attributes":[{"value":"/ Add bigint to bigint.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30556,"byte_end":30581,"line_start":509,"line_end":509,"column_start":1,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30582,"byte_end":30599,"line_start":510,"line_end":510,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33809,"byte_end":33817,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"long_mul","qualname":"::bigint::long_mul","value":"pub fn long_mul(&[Limb], &[Limb]) -> Option<VecType>","parent":null,"children":[],"decl_id":null,"docs":" Grade-school multiplication algorithm.","sig":null,"attributes":[{"value":"/ Grade-school multiplication algorithm.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30693,"byte_end":30735,"line_start":515,"line_end":515,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30736,"byte_end":30739,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ Slow, naive algorithm, using limb-bit bases and just shifting left for","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30740,"byte_end":30814,"line_start":517,"line_end":517,"column_start":1,"column_end":75}},{"value":"/ each iteration. This could be optimized with numerous other algorithms,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30815,"byte_end":30890,"line_start":518,"line_end":518,"column_start":1,"column_end":76}},{"value":"/ but it's extremely simple, and works in O(n*m) time, which is fine","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30891,"byte_end":30961,"line_start":519,"line_end":519,"column_start":1,"column_end":71}},{"value":"/ by me. Each iteration, of which there are `m` iterations, requires","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":30962,"byte_end":31032,"line_start":520,"line_end":520,"column_start":1,"column_end":71}},{"value":"/ `n` multiplications, and `n` additions, or grade-school multiplication.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31033,"byte_end":31108,"line_start":521,"line_end":521,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31109,"byte_end":31112,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ Don't use Karatsuba multiplication, since out implementation seems to","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31113,"byte_end":31186,"line_start":523,"line_end":523,"column_start":1,"column_end":74}},{"value":"/ be slower asymptotically, which is likely just due to the small sizes","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31187,"byte_end":31260,"line_start":524,"line_end":524,"column_start":1,"column_end":74}},{"value":"/ we deal with here. For example, running on the following data:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31261,"byte_end":31327,"line_start":525,"line_end":525,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31328,"byte_end":31331,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31332,"byte_end":31343,"line_start":527,"line_end":527,"column_start":1,"column_end":12}},{"value":"/ const SMALL_X: &[u32] = &[","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31344,"byte_end":31374,"line_start":528,"line_end":528,"column_start":1,"column_end":31}},{"value":"/     766857581, 3588187092, 1583923090, 2204542082, 1564708913, 2695310100, 3676050286,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31375,"byte_end":31465,"line_start":529,"line_end":529,"column_start":1,"column_end":91}},{"value":"/     1022770393, 468044626, 446028186","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31466,"byte_end":31506,"line_start":530,"line_end":530,"column_start":1,"column_end":41}},{"value":"/ ];","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31507,"byte_end":31513,"line_start":531,"line_end":531,"column_start":1,"column_end":7}},{"value":"/ const SMALL_Y: &[u32] = &[","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31514,"byte_end":31544,"line_start":532,"line_end":532,"column_start":1,"column_end":31}},{"value":"/     3945492125, 3250752032, 1282554898, 1708742809, 1131807209, 3171663979, 1353276095,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31545,"byte_end":31636,"line_start":533,"line_end":533,"column_start":1,"column_end":92}},{"value":"/     1678845844, 2373924447, 3640713171","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31637,"byte_end":31679,"line_start":534,"line_end":534,"column_start":1,"column_end":43}},{"value":"/ ];","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31680,"byte_end":31686,"line_start":535,"line_end":535,"column_start":1,"column_end":7}},{"value":"/ const LARGE_X: &[u32] = &[","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31687,"byte_end":31717,"line_start":536,"line_end":536,"column_start":1,"column_end":31}},{"value":"/     3647536243, 2836434412, 2154401029, 1297917894, 137240595, 790694805, 2260404854,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31718,"byte_end":31807,"line_start":537,"line_end":537,"column_start":1,"column_end":90}},{"value":"/     3872698172, 690585094, 99641546, 3510774932, 1672049983, 2313458559, 2017623719,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31808,"byte_end":31896,"line_start":538,"line_end":538,"column_start":1,"column_end":89}},{"value":"/     638180197, 1140936565, 1787190494, 1797420655, 14113450, 2350476485, 3052941684,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31897,"byte_end":31985,"line_start":539,"line_end":539,"column_start":1,"column_end":89}},{"value":"/     1993594787, 2901001571, 4156930025, 1248016552, 848099908, 2660577483, 4030871206,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":31986,"byte_end":32076,"line_start":540,"line_end":540,"column_start":1,"column_end":91}},{"value":"/     692169593, 2835966319, 1781364505, 4266390061, 1813581655, 4210899844, 2137005290,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32077,"byte_end":32167,"line_start":541,"line_end":541,"column_start":1,"column_end":91}},{"value":"/     2346701569, 3715571980, 3386325356, 1251725092, 2267270902, 474686922, 2712200426,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32168,"byte_end":32258,"line_start":542,"line_end":542,"column_start":1,"column_end":91}},{"value":"/     197581715, 3087636290, 1379224439, 1258285015, 3230794403, 2759309199, 1494932094,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32259,"byte_end":32349,"line_start":543,"line_end":543,"column_start":1,"column_end":91}},{"value":"/     326310242","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32350,"byte_end":32367,"line_start":544,"line_end":544,"column_start":1,"column_end":18}},{"value":"/ ];","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32368,"byte_end":32374,"line_start":545,"line_end":545,"column_start":1,"column_end":7}},{"value":"/ const LARGE_Y: &[u32] = &[","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32375,"byte_end":32405,"line_start":546,"line_end":546,"column_start":1,"column_end":31}},{"value":"/     1574249566, 868970575, 76716509, 3198027972, 1541766986, 1095120699, 3891610505,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32406,"byte_end":32494,"line_start":547,"line_end":547,"column_start":1,"column_end":89}},{"value":"/     2322545818, 1677345138, 865101357, 2650232883, 2831881215, 3985005565, 2294283760,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32495,"byte_end":32585,"line_start":548,"line_end":548,"column_start":1,"column_end":91}},{"value":"/     3468161605, 393539559, 3665153349, 1494067812, 106699483, 2596454134, 797235106,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32586,"byte_end":32674,"line_start":549,"line_end":549,"column_start":1,"column_end":89}},{"value":"/     705031740, 1209732933, 2732145769, 4122429072, 141002534, 790195010, 4014829800,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32675,"byte_end":32763,"line_start":550,"line_end":550,"column_start":1,"column_end":89}},{"value":"/     1303930792, 3649568494, 308065964, 1233648836, 2807326116, 79326486, 1262500691,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32764,"byte_end":32852,"line_start":551,"line_end":551,"column_start":1,"column_end":89}},{"value":"/     621809229, 2258109428, 3819258501, 171115668, 1139491184, 2979680603, 1333372297,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32853,"byte_end":32942,"line_start":552,"line_end":552,"column_start":1,"column_end":90}},{"value":"/     1657496603, 2790845317, 4090236532, 4220374789, 601876604, 1828177209, 2372228171,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":32943,"byte_end":33033,"line_start":553,"line_end":553,"column_start":1,"column_end":91}},{"value":"/     2247372529","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33034,"byte_end":33052,"line_start":554,"line_end":554,"column_start":1,"column_end":19}},{"value":"/ ];","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33053,"byte_end":33059,"line_start":555,"line_end":555,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33060,"byte_end":33067,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33068,"byte_end":33071,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ We get the following results:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33072,"byte_end":33105,"line_start":558,"line_end":558,"column_start":1,"column_end":34}},{"value":"/ ```text","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33107,"byte_end":33118,"line_start":560,"line_end":560,"column_start":1,"column_end":12}},{"value":"/ mul/small:long          time:   [220.23 ns 221.47 ns 222.81 ns]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33119,"byte_end":33186,"line_start":561,"line_end":561,"column_start":1,"column_end":68}},{"value":"/ Found 4 outliers among 100 measurements (4.00%)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33187,"byte_end":33238,"line_start":562,"line_end":562,"column_start":1,"column_end":52}},{"value":"/   2 (2.00%) high mild","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33239,"byte_end":33264,"line_start":563,"line_end":563,"column_start":1,"column_end":26}},{"value":"/   2 (2.00%) high severe","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33265,"byte_end":33292,"line_start":564,"line_end":564,"column_start":1,"column_end":28}},{"value":"/ mul/small:karatsuba     time:   [233.88 ns 234.63 ns 235.44 ns]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33293,"byte_end":33360,"line_start":565,"line_end":565,"column_start":1,"column_end":68}},{"value":"/ Found 11 outliers among 100 measurements (11.00%)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33361,"byte_end":33414,"line_start":566,"line_end":566,"column_start":1,"column_end":54}},{"value":"/   8 (8.00%) high mild","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33415,"byte_end":33440,"line_start":567,"line_end":567,"column_start":1,"column_end":26}},{"value":"/   3 (3.00%) high severe","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33441,"byte_end":33468,"line_start":568,"line_end":568,"column_start":1,"column_end":28}},{"value":"/ mul/large:long          time:   [1.9365 us 1.9455 us 1.9558 us]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33469,"byte_end":33536,"line_start":569,"line_end":569,"column_start":1,"column_end":68}},{"value":"/ Found 12 outliers among 100 measurements (12.00%)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33537,"byte_end":33590,"line_start":570,"line_end":570,"column_start":1,"column_end":54}},{"value":"/   7 (7.00%) high mild","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33591,"byte_end":33616,"line_start":571,"line_end":571,"column_start":1,"column_end":26}},{"value":"/   5 (5.00%) high severe","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33617,"byte_end":33644,"line_start":572,"line_end":572,"column_start":1,"column_end":28}},{"value":"/ mul/large:karatsuba     time:   [4.4250 us 4.4515 us 4.4812 us]","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33645,"byte_end":33712,"line_start":573,"line_end":573,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33713,"byte_end":33720,"line_start":574,"line_end":574,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33721,"byte_end":33724,"line_start":575,"line_end":575,"column_start":1,"column_end":4}},{"value":"/ In short, Karatsuba multiplication is never worthwhile for out use-case.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":33725,"byte_end":33801,"line_start":576,"line_end":576,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":34634,"byte_end":34643,"line_start":602,"line_end":602,"column_start":8,"column_end":17},"name":"large_mul","qualname":"::bigint::large_mul","value":"pub fn large_mul(&mut VecType, &[Limb]) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Multiply bigint by bigint using grade-school multiplication algorithm.\n","sig":null,"attributes":[{"value":"/ Multiply bigint by bigint using grade-school multiplication algorithm.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":34534,"byte_end":34608,"line_start":600,"line_end":600,"column_start":1,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":34609,"byte_end":34626,"line_start":601,"line_end":601,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":35027,"byte_end":35035,"line_start":619,"line_end":619,"column_start":8,"column_end":16},"name":"shl_bits","qualname":"::bigint::shl_bits","value":"pub fn shl_bits(&mut VecType, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Shift-left `n` bits inside a buffer.\n","sig":null,"attributes":[{"value":"/ Shift-left `n` bits inside a buffer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":34969,"byte_end":35009,"line_start":617,"line_end":617,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":35010,"byte_end":35019,"line_start":618,"line_end":618,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":35824,"byte_end":35833,"line_start":649,"line_end":649,"column_start":8,"column_end":17},"name":"shl_limbs","qualname":"::bigint::shl_limbs","value":"pub fn shl_limbs(&mut VecType, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Shift-left `n` limbs inside a buffer.\n","sig":null,"attributes":[{"value":"/ Shift-left `n` limbs inside a buffer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":35765,"byte_end":35806,"line_start":647,"line_end":647,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":35807,"byte_end":35816,"line_start":648,"line_end":648,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":36485,"byte_end":36488,"line_start":673,"line_end":673,"column_start":8,"column_end":11},"name":"shl","qualname":"::bigint::shl","value":"pub fn shl(&mut VecType, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Shift-left buffer by n bits.\n","sig":null,"attributes":[{"value":"/ Shift-left buffer by n bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":36435,"byte_end":36467,"line_start":671,"line_end":671,"column_start":1,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":36468,"byte_end":36477,"line_start":672,"line_end":672,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":36778,"byte_end":36791,"line_start":687,"line_end":687,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::bigint::leading_zeros","value":"pub fn leading_zeros(&[Limb]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get number of leading zero bits in the storage.\n","sig":null,"attributes":[{"value":"/ Get number of leading zero bits in the storage.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":36709,"byte_end":36760,"line_start":685,"line_end":685,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":36761,"byte_end":36770,"line_start":686,"line_end":686,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":37084,"byte_end":37094,"line_start":699,"line_end":699,"column_start":8,"column_end":18},"name":"bit_length","qualname":"::bigint::bit_length","value":"pub fn bit_length(&[Limb]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the bit-length of the big-integer.\n","sig":null,"attributes":[{"value":"/ Calculate the bit-length of the big-integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":37018,"byte_end":37066,"line_start":697,"line_end":697,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":37067,"byte_end":37076,"line_start":698,"line_end":698,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":39827,"byte_end":39831,"line_start":777,"line_end":777,"column_start":10,"column_end":14},"name":"Limb","qualname":"::bigint::Limb","value":"u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":39749,"byte_end":39817,"line_start":776,"line_end":776,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":39917,"byte_end":39921,"line_start":779,"line_end":779,"column_start":10,"column_end":14},"name":"Wide","qualname":"::bigint::Wide","value":"u128","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":39839,"byte_end":39907,"line_start":778,"line_end":778,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":40009,"byte_end":40018,"line_start":781,"line_end":781,"column_start":11,"column_end":20},"name":"LIMB_BITS","qualname":"::bigint::LIMB_BITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":39930,"byte_end":39998,"line_start":780,"line_end":780,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":79},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"extended_float","qualname":"::extended_float","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":83}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40554,"byte_end":40567,"line_start":11,"line_end":11,"column_start":12,"column_end":25},"name":"ExtendedFloat","qualname":"::extended_float::ExtendedFloat","value":"ExtendedFloat { mant, exp }","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"decl_id":null,"docs":" Extended precision floating-point type.","sig":null,"attributes":[{"value":"/ Extended precision floating-point type.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40387,"byte_end":40430,"line_start":7,"line_end":7,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40431,"byte_end":40434,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Private implementation, exposed only for testing purposes.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40435,"byte_end":40497,"line_start":9,"line_end":9,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":442},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40629,"byte_end":40633,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"mant","qualname":"::extended_float::ExtendedFloat::mant","value":"u64","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Mantissa for the extended-precision float.\n","sig":null,"attributes":[{"value":"/ Mantissa for the extended-precision float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40574,"byte_end":40620,"line_start":12,"line_end":12,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":443},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40706,"byte_end":40709,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"exp","qualname":"::extended_float::ExtendedFloat::exp","value":"i32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Binary exponent for the extended-precision float.\n","sig":null,"attributes":[{"value":"/ Binary exponent for the extended-precision float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40644,"byte_end":40697,"line_start":14,"line_end":14,"column_start":5,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40811,"byte_end":40828,"line_start":20,"line_end":20,"column_start":8,"column_end":25},"name":"extended_to_float","qualname":"::extended_float::extended_to_float","value":"pub fn extended_to_float<F: Float>(ExtendedFloat) -> F","parent":null,"children":[],"decl_id":null,"docs":" Converts an `ExtendedFloat` to the closest machine float type.\n","sig":null,"attributes":[{"value":"/ Converts an `ExtendedFloat` to the closest machine float type.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40719,"byte_end":40785,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/extended_float.rs","byte_start":40786,"byte_end":40803,"line_start":19,"line_end":19,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":85},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lemire","qualname":"::lemire","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Implementation of the Eisel-Lemire algorithm.","sig":null,"attributes":[{"value":"/ Implementation of the Eisel-Lemire algorithm.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49425,"byte_end":49474,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49475,"byte_end":49478,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is adapted from [fast-float-rust](https://github.com/aldanor/fast-float-rust),","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49479,"byte_end":49566,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ a port of [fast_float](https://github.com/fastfloat/fast_float) to Rust.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49567,"byte_end":49643,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"cfg(not(feature = \"compact\"))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49645,"byte_end":49678,"line_start":6,"line_end":6,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49975,"byte_end":49981,"line_start":16,"line_end":16,"column_start":8,"column_end":14},"name":"lemire","qualname":"::lemire::lemire","value":"pub fn lemire<F: Float>(&Number) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Ensure truncation of digits doesn't affect our computation, by doing 2 passes.\n","sig":null,"attributes":[{"value":"/ Ensure truncation of digits doesn't affect our computation, by doing 2 passes.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49875,"byte_end":49957,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":49958,"byte_end":49967,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51597,"byte_end":51610,"line_start":48,"line_end":48,"column_start":8,"column_end":21},"name":"compute_float","qualname":"::lemire::compute_float","value":"pub fn compute_float<F: Float>(i32, u64) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Compute a float using an extended-precision representation.","sig":null,"attributes":[{"value":"/ Compute a float using an extended-precision representation.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":50679,"byte_end":50742,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":50743,"byte_end":50746,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Fast conversion of a the significant digits and decimal exponent","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":50747,"byte_end":50815,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ a float to a extended representation with a binary float. This","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":50816,"byte_end":50882,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ algorithm will accurately parse the vast majority of cases,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":50883,"byte_end":50946,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/ and uses a 128-bit representation (with a fallback 192-bit","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":50947,"byte_end":51009,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/ representation).","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51010,"byte_end":51030,"line_start":36,"line_end":36,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51031,"byte_end":51034,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This algorithm scales the exponent by the decimal exponent","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51035,"byte_end":51097,"line_start":38,"line_end":38,"column_start":1,"column_end":63}},{"value":"/ using pre-computed powers-of-5, and calculates if the","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51098,"byte_end":51155,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/ representation can be unambiguously rounded to the nearest","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51156,"byte_end":51218,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ machine float. Near-halfway cases are not handled here,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51219,"byte_end":51278,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/ and are represented by a negative, biased binary exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51279,"byte_end":51341,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51342,"byte_end":51345,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The algorithm is described in detail in \"Daniel Lemire, Number Parsing","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51346,"byte_end":51420,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ at a Gigabyte per Second\" in section 5, \"Fast Algorithm\", and","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51421,"byte_end":51486,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/ section 6, \"Exact Numbers And Ties\", available online:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51487,"byte_end":51545,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/ <https://arxiv.org/abs/2101.11408.pdf>.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":51546,"byte_end":51589,"line_start":47,"line_end":47,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":55759,"byte_end":55772,"line_start":153,"line_end":153,"column_start":8,"column_end":21},"name":"compute_error","qualname":"::lemire::compute_error","value":"pub fn compute_error<F: Float>(i32, u64) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Fallback algorithm to calculate the non-rounded representation.\n This calculates the extended representation, and then normalizes\n the resulting representation, so the high bit is set.\n","sig":null,"attributes":[{"value":"/ Fallback algorithm to calculate the non-rounded representation.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":55547,"byte_end":55614,"line_start":149,"line_end":149,"column_start":1,"column_end":68}},{"value":"/ This calculates the extended representation, and then normalizes","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":55615,"byte_end":55683,"line_start":150,"line_end":150,"column_start":1,"column_end":69}},{"value":"/ the resulting representation, so the high bit is set.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":55684,"byte_end":55741,"line_start":151,"line_end":151,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":55742,"byte_end":55751,"line_start":152,"line_end":152,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":56074,"byte_end":56094,"line_start":162,"line_end":162,"column_start":8,"column_end":28},"name":"compute_error_scaled","qualname":"::lemire::compute_error_scaled","value":"pub fn compute_error_scaled<F: Float>(i32, u64, i32) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Compute the error from a mantissa scaled to the exponent.\n","sig":null,"attributes":[{"value":"/ Compute the error from a mantissa scaled to the exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":55995,"byte_end":56056,"line_start":160,"line_end":160,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lemire.rs","byte_start":56057,"byte_end":56066,"line_start":161,"line_end":161,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mask","qualname":"::mask","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" Utilities to generate bitmasks.\n","sig":null,"attributes":[{"value":"/ Utilities to generate bitmasks.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97229,"byte_end":97264,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97511,"byte_end":97523,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"lower_n_mask","qualname":"::mask::lower_n_mask","value":"pub fn lower_n_mask(u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Generate a bitwise mask for the lower `n` bits.","sig":null,"attributes":[{"value":"/ Generate a bitwise mask for the lower `n` bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97283,"byte_end":97334,"line_start":5,"line_end":5,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97335,"byte_end":97338,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97339,"byte_end":97353,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97354,"byte_end":97357,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97358,"byte_end":97369,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/ # use minimal_lexical::mask::lower_n_mask;","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97370,"byte_end":97416,"line_start":10,"line_end":10,"column_start":1,"column_end":47}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97417,"byte_end":97438,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(lower_n_mask(2), 0b11);","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97439,"byte_end":97477,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/ # }","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97478,"byte_end":97485,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97486,"byte_end":97493,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97494,"byte_end":97503,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97988,"byte_end":98003,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"lower_n_halfway","qualname":"::mask::lower_n_halfway","value":"pub fn lower_n_halfway(u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate the halfway point for the lower `n` bits.","sig":null,"attributes":[{"value":"/ Calculate the halfway point for the lower `n` bits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97750,"byte_end":97805,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97806,"byte_end":97809,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97810,"byte_end":97824,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97825,"byte_end":97828,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97829,"byte_end":97840,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/ # use minimal_lexical::mask::lower_n_halfway;","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97841,"byte_end":97890,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97891,"byte_end":97912,"line_start":32,"line_end":32,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(lower_n_halfway(2), 0b10);","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97913,"byte_end":97954,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97955,"byte_end":97962,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97963,"byte_end":97970,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":97971,"byte_end":97980,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98395,"byte_end":98402,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"nth_bit","qualname":"::mask::nth_bit","value":"pub fn nth_bit(u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a scalar factor of 2 above the halfway point.","sig":null,"attributes":[{"value":"/ Calculate a scalar factor of 2 above the halfway point.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98168,"byte_end":98227,"line_start":46,"line_end":46,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98228,"byte_end":98231,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98232,"byte_end":98246,"line_start":48,"line_end":48,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98247,"byte_end":98250,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98251,"byte_end":98262,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/ # use minimal_lexical::mask::nth_bit;","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98263,"byte_end":98304,"line_start":51,"line_end":51,"column_start":1,"column_end":42}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98305,"byte_end":98326,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(nth_bit(2), 0b100);","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98327,"byte_end":98361,"line_start":53,"line_end":53,"column_start":1,"column_end":35}},{"value":"/ # }","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98362,"byte_end":98369,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98370,"byte_end":98377,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/mask.rs","byte_start":98378,"byte_end":98387,"line_start":56,"line_end":56,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":120},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":170},{"krate":0,"index":193}],"decl_id":null,"docs":" Utilities for Rust numbers.\n","sig":null,"attributes":[{"value":"/ Utilities for Rust numbers.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":98491,"byte_end":98522,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99093,"byte_end":99098,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Float","qualname":"::num::Float","value":"Float: Sized + Copy + PartialEq + PartialOrd + Send + Sync + ops::Add<Output =\nSelf> + ops::AddAssign + ops::Div<Output = Self> + ops::DivAssign +\nops::Mul<Output = Self> + ops::MulAssign + ops::Rem<Output = Self> +\nops::RemAssign + ops::Sub<Output = Self> + ops::SubAssign + ops::Neg<Output =\nSelf>","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"decl_id":null,"docs":" Generic floating-point type, to be used in generic code for parsing.","sig":null,"attributes":[{"value":"/ Generic floating-point type, to be used in generic code for parsing.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":98812,"byte_end":98884,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":98885,"byte_end":98888,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Although the trait is part of the public API, the trait provides methods","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":98889,"byte_end":98965,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ and constants that are effectively non-public: they may be removed","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":98966,"byte_end":99036,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ at any time without any breaking changes.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99037,"byte_end":99082,"line_start":17,"line_end":17,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":141},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100433,"byte_end":100443,"line_start":61,"line_end":61,"column_start":11,"column_end":21},"name":"MAX_DIGITS","qualname":"::num::Float::MAX_DIGITS","value":"usize","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Maximum number of digits that can contribute in the mantissa.","sig":null,"attributes":[{"value":"/ Maximum number of digits that can contribute in the mantissa.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99467,"byte_end":99532,"line_start":37,"line_end":37,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99537,"byte_end":99540,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ We can exactly represent a float in radix `b` from radix 2 if","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99545,"byte_end":99610,"line_start":39,"line_end":39,"column_start":5,"column_end":70}},{"value":"/ `b` is divisible by 2. This function calculates the exact number of","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99615,"byte_end":99686,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ digits required to exactly represent that float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99691,"byte_end":99743,"line_start":41,"line_end":41,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99748,"byte_end":99751,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ According to the \"Handbook of Floating Point Arithmetic\",","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99756,"byte_end":99817,"line_start":43,"line_end":43,"column_start":5,"column_end":66}},{"value":"/ for IEEE754, with emin being the min exponent, p2 being the","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99822,"byte_end":99885,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/ precision, and b being the radix, the number of digits follows as:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99890,"byte_end":99960,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99965,"byte_end":99968,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ `−emin + p2 + ⌊(emin + 1) log(2, b) − log(1 − 2^(−p2), b)⌋`","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99973,"byte_end":100048,"line_start":47,"line_end":47,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100053,"byte_end":100056,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ For f32, this follows as:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100061,"byte_end":100090,"line_start":49,"line_end":49,"column_start":5,"column_end":34}},{"value":"/     emin = -126","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100095,"byte_end":100114,"line_start":50,"line_end":50,"column_start":5,"column_end":24}},{"value":"/     p2 = 24","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100119,"byte_end":100134,"line_start":51,"line_end":51,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100139,"byte_end":100142,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ For f64, this follows as:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100147,"byte_end":100176,"line_start":53,"line_end":53,"column_start":5,"column_end":34}},{"value":"/     emin = -1022","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100181,"byte_end":100201,"line_start":54,"line_end":54,"column_start":5,"column_end":25}},{"value":"/     p2 = 53","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100206,"byte_end":100221,"line_start":55,"line_end":55,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100226,"byte_end":100229,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ In Python:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100234,"byte_end":100248,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/     `-emin + p2 + math.floor((emin+1)*math.log(2, b) - math.log(1-2**(-p2), b))`","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100253,"byte_end":100337,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100342,"byte_end":100345,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This was used to calculate the maximum number of digits for [2, 36].","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100350,"byte_end":100422,"line_start":60,"line_end":60,"column_start":5,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":142},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100511,"byte_end":100520,"line_start":66,"line_end":66,"column_start":11,"column_end":20},"name":"SIGN_MASK","qualname":"::num::Float::SIGN_MASK","value":"u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Bitmask for the sign bit.\n","sig":null,"attributes":[{"value":"/ Bitmask for the sign bit.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100471,"byte_end":100500,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":143},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100597,"byte_end":100610,"line_start":68,"line_end":68,"column_start":11,"column_end":24},"name":"EXPONENT_MASK","qualname":"::num::Float::EXPONENT_MASK","value":"u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Bitmask for the exponent, including the hidden bit.\n","sig":null,"attributes":[{"value":"/ Bitmask for the exponent, including the hidden bit.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100531,"byte_end":100586,"line_start":67,"line_end":67,"column_start":5,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100715,"byte_end":100730,"line_start":70,"line_end":70,"column_start":11,"column_end":26},"name":"HIDDEN_BIT_MASK","qualname":"::num::Float::HIDDEN_BIT_MASK","value":"u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Bitmask for the hidden bit in exponent, which is an implicit 1 in the fraction.\n","sig":null,"attributes":[{"value":"/ Bitmask for the hidden bit in exponent, which is an implicit 1 in the fraction.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100621,"byte_end":100704,"line_start":69,"line_end":69,"column_start":5,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":145},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100818,"byte_end":100831,"line_start":72,"line_end":72,"column_start":11,"column_end":24},"name":"MANTISSA_MASK","qualname":"::num::Float::MANTISSA_MASK","value":"u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Bitmask for the mantissa (fraction), excluding the hidden bit.\n","sig":null,"attributes":[{"value":"/ Bitmask for the mantissa (fraction), excluding the hidden bit.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100741,"byte_end":100807,"line_start":71,"line_end":71,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":146},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100931,"byte_end":100944,"line_start":77,"line_end":77,"column_start":11,"column_end":24},"name":"MANTISSA_SIZE","qualname":"::num::Float::MANTISSA_SIZE","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Size of the significand (mantissa) without hidden bit.\n","sig":null,"attributes":[{"value":"/ Size of the significand (mantissa) without hidden bit.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100862,"byte_end":100920,"line_start":76,"line_end":76,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":147},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100989,"byte_end":101002,"line_start":79,"line_end":79,"column_start":11,"column_end":24},"name":"EXPONENT_BIAS","qualname":"::num::Float::EXPONENT_BIAS","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Bias of the exponet\n","sig":null,"attributes":[{"value":"/ Bias of the exponet","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":100955,"byte_end":100978,"line_start":78,"line_end":78,"column_start":5,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":148},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101065,"byte_end":101082,"line_start":81,"line_end":81,"column_start":11,"column_end":28},"name":"DENORMAL_EXPONENT","qualname":"::num::Float::DENORMAL_EXPONENT","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Exponent portion of a denormal float.\n","sig":null,"attributes":[{"value":"/ Exponent portion of a denormal float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101013,"byte_end":101054,"line_start":80,"line_end":80,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101140,"byte_end":101152,"line_start":83,"line_end":83,"column_start":11,"column_end":23},"name":"MAX_EXPONENT","qualname":"::num::Float::MAX_EXPONENT","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Maximum exponent value in float.\n","sig":null,"attributes":[{"value":"/ Maximum exponent value in float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101093,"byte_end":101129,"line_start":82,"line_end":82,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101267,"byte_end":101277,"line_start":88,"line_end":88,"column_start":11,"column_end":21},"name":"CARRY_MASK","qualname":"::num::Float::CARRY_MASK","value":"u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Mask to determine if a full-carry occurred (1 in bit above hidden bit).\n","sig":null,"attributes":[{"value":"/ Mask to determine if a full-carry occurred (1 in bit above hidden bit).","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101181,"byte_end":101256,"line_start":87,"line_end":87,"column_start":5,"column_end":80}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101428,"byte_end":101438,"line_start":92,"line_end":92,"column_start":11,"column_end":21},"name":"INVALID_FP","qualname":"::num::Float::INVALID_FP","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Bias for marking an invalid extended float.\n","sig":null,"attributes":[{"value":"/ Bias for marking an invalid extended float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101289,"byte_end":101336,"line_start":90,"line_end":90,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101529,"byte_end":101551,"line_start":95,"line_end":95,"column_start":11,"column_end":33},"name":"MAX_MANTISSA_FAST_PATH","qualname":"::num::Float::MAX_MANTISSA_FAST_PATH","value":"u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":101653,"byte_end":101667,"line_start":98,"line_end":98,"column_start":11,"column_end":25},"name":"INFINITE_POWER","qualname":"::num::Float::INFINITE_POWER","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102703,"byte_end":102729,"line_start":118,"line_end":118,"column_start":11,"column_end":37},"name":"MIN_EXPONENT_ROUND_TO_EVEN","qualname":"::num::Float::MIN_EXPONENT_ROUND_TO_EVEN","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102746,"byte_end":102772,"line_start":119,"line_end":119,"column_start":11,"column_end":37},"name":"MAX_EXPONENT_ROUND_TO_EVEN","qualname":"::num::Float::MAX_EXPONENT_ROUND_TO_EVEN","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102863,"byte_end":102879,"line_start":122,"line_end":122,"column_start":11,"column_end":27},"name":"MINIMUM_EXPONENT","qualname":"::num::Float::MINIMUM_EXPONENT","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Minimum normal exponent value `-(1 << (EXPONENT_SIZE - 1)) + 1`.\n","sig":null,"attributes":[{"value":"/ Minimum normal exponent value `-(1 << (EXPONENT_SIZE - 1)) + 1`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102784,"byte_end":102852,"line_start":121,"line_end":121,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102953,"byte_end":102974,"line_start":125,"line_end":125,"column_start":11,"column_end":32},"name":"SMALLEST_POWER_OF_TEN","qualname":"::num::Float::SMALLEST_POWER_OF_TEN","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Smallest decimal exponent for a non-zero value.\n","sig":null,"attributes":[{"value":"/ Smallest decimal exponent for a non-zero value.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102891,"byte_end":102942,"line_start":124,"line_end":124,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103051,"byte_end":103071,"line_start":128,"line_end":128,"column_start":11,"column_end":31},"name":"LARGEST_POWER_OF_TEN","qualname":"::num::Float::LARGEST_POWER_OF_TEN","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Largest decimal exponent for a non-infinite value.\n","sig":null,"attributes":[{"value":"/ Largest decimal exponent for a non-infinite value.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":102986,"byte_end":103040,"line_start":127,"line_end":127,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103180,"byte_end":103202,"line_start":131,"line_end":131,"column_start":11,"column_end":33},"name":"MIN_EXPONENT_FAST_PATH","qualname":"::num::Float::MIN_EXPONENT_FAST_PATH","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Minimum exponent that for a fast path case, or `-⌊(MANTISSA_SIZE+1)/log2(10)⌋`\n","sig":null,"attributes":[{"value":"/ Minimum exponent that for a fast path case, or `-⌊(MANTISSA_SIZE+1)/log2(10)⌋`","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103083,"byte_end":103169,"line_start":130,"line_end":130,"column_start":5,"column_end":87}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103309,"byte_end":103331,"line_start":134,"line_end":134,"column_start":11,"column_end":33},"name":"MAX_EXPONENT_FAST_PATH","qualname":"::num::Float::MAX_EXPONENT_FAST_PATH","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Maximum exponent that for a fast path case, or `⌊(MANTISSA_SIZE+1)/log2(5)⌋`\n","sig":null,"attributes":[{"value":"/ Maximum exponent that for a fast path case, or `⌊(MANTISSA_SIZE+1)/log2(5)⌋`","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103214,"byte_end":103298,"line_start":133,"line_end":133,"column_start":5,"column_end":85}}]},{"kind":"Const","id":{"krate":0,"index":161},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103506,"byte_end":103538,"line_start":138,"line_end":138,"column_start":11,"column_end":43},"name":"MAX_EXPONENT_DISGUISED_FAST_PATH","qualname":"::num::Float::MAX_EXPONENT_DISGUISED_FAST_PATH","value":"i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Maximum exponent that can be represented for a disguised-fast path case.\n This is `MAX_EXPONENT_FAST_PATH + ⌊(MANTISSA_SIZE+1)/log2(10)⌋`\n","sig":null,"attributes":[{"value":"/ Maximum exponent that can be represented for a disguised-fast path case.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103343,"byte_end":103419,"line_start":136,"line_end":136,"column_start":5,"column_end":81}},{"value":"/ This is `MAX_EXPONENT_FAST_PATH + ⌊(MANTISSA_SIZE+1)/log2(10)⌋`","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103424,"byte_end":103495,"line_start":137,"line_end":137,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103594,"byte_end":103602,"line_start":141,"line_end":141,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::num::Float::from_u64","value":"pub fn from_u64(u64) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Convert 64-bit integer to float.\n","sig":null,"attributes":[{"value":"/ Convert 64-bit integer to float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103550,"byte_end":103586,"line_start":140,"line_end":140,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103665,"byte_end":103674,"line_start":144,"line_end":144,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::num::Float::from_bits","value":"pub fn from_bits(u64) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103699,"byte_end":103706,"line_start":145,"line_end":145,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::num::Float::to_bits","value":"pub fn to_bits(Self) -> u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103903,"byte_end":103916,"line_start":152,"line_end":152,"column_start":15,"column_end":28},"name":"pow_fast_path","qualname":"::num::Float::pow_fast_path","value":"pub unsafe fn pow_fast_path(usize) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Get a small power-of-radix for fast-path multiplication.","sig":null,"attributes":[{"value":"/ Get a small power-of-radix for fast-path multiplication.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103726,"byte_end":103786,"line_start":147,"line_end":147,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103791,"byte_end":103794,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103799,"byte_end":103811,"line_start":149,"line_end":149,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103816,"byte_end":103819,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Safe as long as the exponent is smaller than the table size.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103824,"byte_end":103888,"line_start":151,"line_end":151,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104157,"byte_end":104174,"line_start":160,"line_end":160,"column_start":15,"column_end":32},"name":"int_pow_fast_path","qualname":"::num::Float::int_pow_fast_path","value":"pub unsafe fn int_pow_fast_path(usize, u32) -> u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Get a small, integral power-of-radix for fast-path multiplication.","sig":null,"attributes":[{"value":"/ Get a small, integral power-of-radix for fast-path multiplication.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":103948,"byte_end":104018,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104023,"byte_end":104026,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104031,"byte_end":104043,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104048,"byte_end":104051,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Safe as long as the exponent is smaller than the table size.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104056,"byte_end":104120,"line_start":158,"line_end":158,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104125,"byte_end":104142,"line_start":159,"line_end":159,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104740,"byte_end":104751,"line_start":175,"line_end":175,"column_start":8,"column_end":19},"name":"is_denormal","qualname":"::num::Float::is_denormal","value":"pub fn is_denormal(Self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns true if the float is a denormal.\n","sig":null,"attributes":[{"value":"/ Returns true if the float is a denormal.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104674,"byte_end":104718,"line_start":173,"line_end":173,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104723,"byte_end":104732,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104893,"byte_end":104901,"line_start":181,"line_end":181,"column_start":8,"column_end":16},"name":"exponent","qualname":"::num::Float::exponent","value":"pub fn exponent(Self) -> i32","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Get exponent component from the float.\n","sig":null,"attributes":[{"value":"/ Get exponent component from the float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104829,"byte_end":104871,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":104876,"byte_end":104885,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":105253,"byte_end":105261,"line_start":193,"line_end":193,"column_start":8,"column_end":16},"name":"mantissa","qualname":"::num::Float::mantissa","value":"pub fn mantissa(Self) -> u64","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Get mantissa (significand) component from float.\n","sig":null,"attributes":[{"value":"/ Get mantissa (significand) component from float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":105179,"byte_end":105231,"line_start":191,"line_end":191,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":105236,"byte_end":105245,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":216},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"number","qualname":"::number","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":456},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":220}],"decl_id":null,"docs":" Representation of a float as the significant digits and exponent.","sig":null,"attributes":[{"value":"/ Representation of a float as the significant digits and exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":108741,"byte_end":108810,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":108811,"byte_end":108814,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is adapted from [fast-float-rust](https://github.com/aldanor/fast-float-rust),","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":108815,"byte_end":108902,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ a port of [fast_float](https://github.com/fastfloat/fast_float) to Rust.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":108903,"byte_end":108979,"line_start":4,"line_end":4,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":456},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109386,"byte_end":109392,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Number","qualname":"::number::Number","value":"Number { exponent, mantissa, many_digits }","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"decl_id":null,"docs":" Representation of a number as the significant digits and exponent.","sig":null,"attributes":[{"value":"/ Representation of a number as the significant digits and exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109081,"byte_end":109151,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109152,"byte_end":109155,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This is only used if the exponent base and the significant digit","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109156,"byte_end":109224,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ radix are the same, since we need to be able to move powers in and","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109225,"byte_end":109295,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ out of the exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109296,"byte_end":109320,"line_start":16,"line_end":16,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":457},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109462,"byte_end":109470,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"exponent","qualname":"::number::Number::exponent","value":"i32","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" The exponent of the float, scaled to the mantissa.\n","sig":null,"attributes":[{"value":"/ The exponent of the float, scaled to the mantissa.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109399,"byte_end":109453,"line_start":19,"line_end":19,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":458},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109530,"byte_end":109538,"line_start":22,"line_end":22,"column_start":9,"column_end":17},"name":"mantissa","qualname":"::number::Number::mantissa","value":"u64","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" The significant digits of the float.\n","sig":null,"attributes":[{"value":"/ The significant digits of the float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109481,"byte_end":109521,"line_start":21,"line_end":21,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":459},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109603,"byte_end":109614,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"name":"many_digits","qualname":"::number::Number::many_digits","value":"bool","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" If the significant digits were truncated.\n","sig":null,"attributes":[{"value":"/ If the significant digits were truncated.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109549,"byte_end":109594,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109744,"byte_end":109756,"line_start":30,"line_end":30,"column_start":12,"column_end":24},"name":"is_fast_path","qualname":"<Number>::is_fast_path","value":"pub fn is_fast_path<F: Float>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Detect if the float can be accurately reconstructed from native floats.\n","sig":null,"attributes":[{"value":"/ Detect if the float can be accurately reconstructed from native floats.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109643,"byte_end":109718,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109723,"byte_end":109732,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110529,"byte_end":110542,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"name":"try_fast_path","qualname":"<Number>::try_fast_path","value":"pub fn try_fast_path<F: Float>(&Self) -> Option<F>","parent":null,"children":[],"decl_id":null,"docs":" The fast path algorithmn using machine-sized integers and floats.","sig":null,"attributes":[{"value":"/ The fast path algorithmn using machine-sized integers and floats.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110005,"byte_end":110074,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110079,"byte_end":110082,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This is extracted into a separate function so that it can be attempted before constructing","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110087,"byte_end":110181,"line_start":39,"line_end":39,"column_start":5,"column_end":99}},{"value":"/ a Decimal. This only works if both the mantissa and the exponent","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110186,"byte_end":110254,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/ can be exactly represented as a machine float, since IEE-754 guarantees","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110259,"byte_end":110334,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ no rounding will occur.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110339,"byte_end":110366,"line_start":42,"line_end":42,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110371,"byte_end":110374,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ There is an exception: disguised fast-path cases, where we can shift","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110379,"byte_end":110451,"line_start":44,"line_end":44,"column_start":5,"column_end":77}},{"value":"/ powers-of-10 from the exponent to the significant digits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":110456,"byte_end":110517,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":225},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::parse","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261}],"decl_id":null,"docs":" Parse byte iterators to float.\n","sig":null,"attributes":[{"value":"/ Parse byte iterators to float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":112465,"byte_end":112499,"line_start":1,"line_end":1,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117342,"byte_end":117353,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"parse_float","qualname":"::parse::parse_float","value":"pub fn parse_float<'a, F, Iter1, Iter2>(Iter1, Iter2, i32) -> F where\nF: Float, Iter1: Iterator<Item = &'a u8> + Clone, Iter2: Iterator<Item =\n&'a u8> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Parse float from extracted float components.","sig":null,"attributes":[{"value":"/ Parse float from extracted float components.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116196,"byte_end":116244,"line_start":121,"line_end":121,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116245,"byte_end":116248,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ * `integer`     - Cloneable, forward iterator over integer digits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116249,"byte_end":116319,"line_start":123,"line_end":123,"column_start":1,"column_end":71}},{"value":"/ * `fraction`    - Cloneable, forward iterator over integer digits.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116320,"byte_end":116390,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"/ * `exponent`    - Parsed, 32-bit exponent.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116391,"byte_end":116437,"line_start":125,"line_end":125,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116438,"byte_end":116441,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ # Preconditions","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116442,"byte_end":116461,"line_start":127,"line_end":127,"column_start":1,"column_end":20}},{"value":"/ 1. The integer should not have leading zeros.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116462,"byte_end":116511,"line_start":128,"line_end":128,"column_start":1,"column_end":50}},{"value":"/ 2. The fraction should not have trailing zeros.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116512,"byte_end":116563,"line_start":129,"line_end":129,"column_start":1,"column_end":52}},{"value":"/ 3. All bytes in `integer` and `fraction` should be valid digits,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116564,"byte_end":116632,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/     in the range [`b'0', b'9'].","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116633,"byte_end":116668,"line_start":131,"line_end":131,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116669,"byte_end":116672,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116673,"byte_end":116685,"line_start":133,"line_end":133,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116686,"byte_end":116689,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Although passing garbage input will not cause memory safety issues,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116690,"byte_end":116761,"line_start":135,"line_end":135,"column_start":1,"column_end":72}},{"value":"/ it is very likely to cause a panic with a large number of digits, or","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116762,"byte_end":116834,"line_start":136,"line_end":136,"column_start":1,"column_end":73}},{"value":"/ in debug mode. The big-integer arithmetic without the `alloc` feature","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116835,"byte_end":116908,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/ assumes a maximum, fixed-width input, which assumes at maximum a","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116909,"byte_end":116977,"line_start":138,"line_end":138,"column_start":1,"column_end":69}},{"value":"/ value of `10^(769 + 342)`, or ~4000 bits of storage. Passing in","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":116978,"byte_end":117045,"line_start":139,"line_end":139,"column_start":1,"column_end":68}},{"value":"/ nonsensical digits may require up to ~6000 bits of storage, which will","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117046,"byte_end":117120,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ panic when attempting to add it to the big integer. It is therefore","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117121,"byte_end":117192,"line_start":141,"line_end":141,"column_start":1,"column_end":72}},{"value":"/ up to the caller to validate this input.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117193,"byte_end":117237,"line_start":142,"line_end":142,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117238,"byte_end":117241,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ We cannot efficiently remove trailing zeros while only accepting a","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117242,"byte_end":117312,"line_start":144,"line_end":144,"column_start":1,"column_end":71}},{"value":"/ forward iterator.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":117313,"byte_end":117334,"line_start":145,"line_end":145,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":118402,"byte_end":118415,"line_start":176,"line_end":176,"column_start":8,"column_end":21},"name":"moderate_path","qualname":"::parse::moderate_path","value":"pub fn moderate_path<F: Float>(&Number) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Wrapper for different moderate-path algorithms.\n A return exponent of `-1` indicates an invalid value.\n","sig":null,"attributes":[{"value":"/ Wrapper for different moderate-path algorithms.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":118275,"byte_end":118326,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ A return exponent of `-1` indicates an invalid value.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":118327,"byte_end":118384,"line_start":174,"line_end":174,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":118385,"byte_end":118394,"line_start":175,"line_end":175,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":118978,"byte_end":118987,"line_start":199,"line_end":199,"column_start":8,"column_end":17},"name":"add_digit","qualname":"::parse::add_digit","value":"pub fn add_digit(u64, u8) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/parse.rs","byte_start":118961,"byte_end":118970,"line_start":198,"line_end":198,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":262},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rounding","qualname":"::rounding","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":281}],"decl_id":null,"docs":" Defines rounding schemes for floating-point numbers.\n","sig":null,"attributes":[{"value":"/ Defines rounding schemes for floating-point numbers.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119084,"byte_end":119140,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":276},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119546,"byte_end":119551,"line_start":17,"line_end":17,"column_start":8,"column_end":13},"name":"round","qualname":"::rounding::round","value":"pub fn round<F, Cb>(&mut ExtendedFloat, Cb) where F: Float,\nCb: Fn(&mut ExtendedFloat, i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Round an extended-precision float to the nearest machine float.","sig":null,"attributes":[{"value":"/ Round an extended-precision float to the nearest machine float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119300,"byte_end":119367,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119368,"byte_end":119371,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Shifts the significant digits into place, adjusts the exponent,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119372,"byte_end":119439,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ so it can be easily converted to a native float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119440,"byte_end":119492,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":119530,"byte_end":119536,"line_start":16,"line_end":16,"column_start":38,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":279},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121543,"byte_end":121565,"line_start":77,"line_end":77,"column_start":8,"column_end":30},"name":"round_nearest_tie_even","qualname":"::rounding::round_nearest_tie_even","value":"pub fn round_nearest_tie_even<Cb>(&mut ExtendedFloat, i32, Cb) where\nCb: Fn(bool, bool, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Shift right N-bytes and round towards a direction.","sig":null,"attributes":[{"value":"/ Shift right N-bytes and round towards a direction.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121320,"byte_end":121374,"line_start":70,"line_end":70,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121375,"byte_end":121378,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Callback should take the following parameters:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121379,"byte_end":121429,"line_start":72,"line_end":72,"column_start":1,"column_end":51}},{"value":"/     1. is_odd","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121430,"byte_end":121447,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/     1. is_halfway","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121448,"byte_end":121469,"line_start":74,"line_end":74,"column_start":1,"column_end":22}},{"value":"/     1. is_above","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121470,"byte_end":121489,"line_start":75,"line_end":75,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":121527,"byte_end":121533,"line_start":76,"line_end":76,"column_start":38,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":281},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":123140,"byte_end":123150,"line_start":124,"line_end":124,"column_start":8,"column_end":18},"name":"round_down","qualname":"::rounding::round_down","value":"pub fn round_down(&mut ExtendedFloat, i32)","parent":null,"children":[],"decl_id":null,"docs":" Round our significant digits into place, truncating them.\n","sig":null,"attributes":[{"value":"/ Round our significant digits into place, truncating them.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":123025,"byte_end":123086,"line_start":122,"line_end":122,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/rounding.rs","byte_start":123124,"byte_end":123130,"line_start":123,"line_end":123,"column_start":38,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":282},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slow","qualname":"::slow","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":324},{"krate":0,"index":328},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":343}],"decl_id":null,"docs":" Slow, fallback cases where we cannot unambiguously round a float.","sig":null,"attributes":[{"value":"/ Slow, fallback cases where we cannot unambiguously round a float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":123371,"byte_end":123440,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":123441,"byte_end":123444,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This occurs when we cannot determine the exact representation using","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":123445,"byte_end":123516,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ both the fast path (native) cases nor the Lemire/Bellerophon algorithms,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":123517,"byte_end":123593,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ and therefore must fallback to a slow, arbitrary-precision representation.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":123594,"byte_end":123672,"line_start":5,"line_end":5,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":319},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124940,"byte_end":124944,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"slow","qualname":"::slow::slow","value":"pub fn slow<'a, F, Iter1, Iter2>(Number, ExtendedFloat, Iter1, Iter2)\n-> ExtendedFloat where F: Float, Iter1: Iterator<Item = &'a u8> + Clone,\nIter2: Iterator<Item = &'a u8> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Parse the significant digits and biased, binary exponent of a float.","sig":null,"attributes":[{"value":"/ Parse the significant digits and biased, binary exponent of a float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":123959,"byte_end":124031,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124032,"byte_end":124035,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is a fallback algorithm that uses a big-integer representation","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124036,"byte_end":124107,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ of the float, and therefore is considerably slower than faster","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124108,"byte_end":124174,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ approximations. However, it will always determine how to round","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124175,"byte_end":124241,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ the significant digits to the nearest machine float, allowing","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124242,"byte_end":124307,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/ use to handle near half-way cases.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124308,"byte_end":124346,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124347,"byte_end":124350,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Near half-way cases are halfway between two consecutive machine floats.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124351,"byte_end":124426,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ For example, the float `16777217.0` has a bitwise representation of","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124427,"byte_end":124498,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ `100000000000000000000000 1`. Rounding to a single-precision float,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124499,"byte_end":124570,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ the trailing `1` is truncated. Using round-nearest, tie-even, any","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124571,"byte_end":124640,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ value above `16777217.0` must be rounded up to `16777218.0`, while","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124641,"byte_end":124711,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ any value before or equal to `16777217.0` must be rounded down","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124712,"byte_end":124778,"line_start":32,"line_end":32,"column_start":1,"column_end":67}},{"value":"/ to `16777216.0`. These near-halfway conversions therefore may require","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124779,"byte_end":124852,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ a large number of digits to unambiguously determine how to round.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124853,"byte_end":124922,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":124923,"byte_end":124932,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":324},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":126121,"byte_end":126140,"line_start":69,"line_end":69,"column_start":8,"column_end":27},"name":"positive_digit_comp","qualname":"::slow::positive_digit_comp","value":"pub fn positive_digit_comp<F: Float>(Bigint, i32) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Generate the significant digits with a positive exponent relative to mantissa.\n","sig":null,"attributes":[{"value":"/ Generate the significant digits with a positive exponent relative to mantissa.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":126031,"byte_end":126113,"line_start":68,"line_end":68,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":328},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128401,"byte_end":128420,"line_start":116,"line_end":116,"column_start":8,"column_end":27},"name":"negative_digit_comp","qualname":"::slow::negative_digit_comp","value":"pub fn negative_digit_comp<F: Float>(Bigint, ExtendedFloat, i32)\n-> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Generate the significant digits with a negative exponent relative to mantissa.","sig":null,"attributes":[{"value":"/ Generate the significant digits with a negative exponent relative to mantissa.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127161,"byte_end":127243,"line_start":95,"line_end":95,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127244,"byte_end":127247,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This algorithm is quite simple: we have the significant digits `m1 * b^N1`,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127248,"byte_end":127327,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ where `m1` is the bigint mantissa, `b` is the radix, and `N1` is the radix","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127328,"byte_end":127406,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ exponent. We then calculate the theoretical representation of `b+h`, which","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127407,"byte_end":127485,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/ is `m2 * 2^N2`, where `m2` is the bigint mantissa and `N2` is the binary","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127486,"byte_end":127562,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ exponent. If we had infinite, efficient floating precision, this would be","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127563,"byte_end":127640,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/ equal to `m1 / b^-N1` and then compare it to `m2 * 2^N2`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127641,"byte_end":127702,"line_start":102,"line_end":102,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127703,"byte_end":127706,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Since we cannot divide and keep precision, we must multiply the other:","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127707,"byte_end":127781,"line_start":104,"line_end":104,"column_start":1,"column_end":75}},{"value":"/ if we want to do `m1 / b^-N1 >= m2 * 2^N2`, we can do","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127782,"byte_end":127839,"line_start":105,"line_end":105,"column_start":1,"column_end":58}},{"value":"/ `m1 >= m2 * b^-N1 * 2^N2` Going to the decimal case, we can show and example","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127840,"byte_end":127920,"line_start":106,"line_end":106,"column_start":1,"column_end":81}},{"value":"/ and simplify this further: `m1 >= m2 * 2^N2 * 10^-N1`. Since we can remove","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":127921,"byte_end":127999,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ a power-of-two, this is `m1 >= m2 * 2^(N2 - N1) * 5^-N1`. Therefore, if","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128000,"byte_end":128075,"line_start":108,"line_end":108,"column_start":1,"column_end":76}},{"value":"/ `N2 - N1 > 0`, we need have `m1 >= m2 * 2^(N2 - N1) * 5^-N1`, otherwise,","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128076,"byte_end":128152,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/ we have `m1 * 2^(N1 - N2) >= m2 * 5^-N1`, where the resulting exponents","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128153,"byte_end":128228,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ are all positive.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128229,"byte_end":128250,"line_start":111,"line_end":111,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128251,"byte_end":128254,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ This allows us to compare both floats using integers efficiently","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128255,"byte_end":128323,"line_start":113,"line_end":113,"column_start":1,"column_end":69}},{"value":"/ without any loss of precision.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128324,"byte_end":128358,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"allow(clippy :: comparison_chain)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":128359,"byte_end":128393,"line_start":115,"line_end":115,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":336},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":133722,"byte_end":133736,"line_start":265,"line_end":265,"column_start":8,"column_end":22},"name":"parse_mantissa","qualname":"::slow::parse_mantissa","value":"pub fn parse_mantissa<'a, Iter1, Iter2>(Iter1, Iter2, usize)\n-> (Bigint, usize) where Iter1: Iterator<Item = &'a u8> + Clone,\nIter2: Iterator<Item = &'a u8> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Parse the full mantissa into a big integer.","sig":null,"attributes":[{"value":"/ Parse the full mantissa into a big integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":133528,"byte_end":133575,"line_start":261,"line_end":261,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":133576,"byte_end":133579,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ Returns the parsed mantissa and the number of digits in the mantissa.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":133580,"byte_end":133653,"line_start":263,"line_end":263,"column_start":1,"column_end":74}},{"value":"/ The max digits is the maximum number of digits plus one.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":133654,"byte_end":133714,"line_start":264,"line_end":264,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":340},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137103,"byte_end":137122,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"scientific_exponent","qualname":"::slow::scientific_exponent","value":"pub fn scientific_exponent(&Number) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the scientific exponent from a `Number` value.\n Any other attempts would require slowdowns for faster algorithms.\n","sig":null,"attributes":[{"value":"/ Calculate the scientific exponent from a `Number` value.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":136955,"byte_end":137015,"line_start":364,"line_end":364,"column_start":1,"column_end":61}},{"value":"/ Any other attempts would require slowdowns for faster algorithms.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137016,"byte_end":137085,"line_start":365,"line_end":365,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137086,"byte_end":137095,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137617,"byte_end":137618,"line_start":388,"line_end":388,"column_start":8,"column_end":9},"name":"b","qualname":"::slow::b","value":"pub fn b<F: Float>(F) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Calculate `b` from a a representation of `b` as a float.\n","sig":null,"attributes":[{"value":"/ Calculate `b` from a a representation of `b` as a float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137539,"byte_end":137599,"line_start":386,"line_end":386,"column_start":1,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137600,"byte_end":137609,"line_start":387,"line_end":387,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":343},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137830,"byte_end":137832,"line_start":397,"line_end":397,"column_start":8,"column_end":10},"name":"bh","qualname":"::slow::bh","value":"pub fn bh<F: Float>(F) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Calculate `b+h` from a a representation of `b` as a float.\n","sig":null,"attributes":[{"value":"/ Calculate `b+h` from a a representation of `b` as a float.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137750,"byte_end":137812,"line_start":395,"line_end":395,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/slow.rs","byte_start":137813,"byte_end":137822,"line_start":396,"line_end":396,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":345},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stackvec","qualname":"::stackvec","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":474},{"krate":0,"index":478},{"krate":0,"index":365},{"krate":0,"index":388},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":403}],"decl_id":null,"docs":" Simple stack-allocated vector.\n","sig":null,"attributes":[{"value":"/ Simple stack-allocated vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":137983,"byte_end":138017,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"cfg(not(feature = \"alloc\"))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138019,"byte_end":138050,"line_start":3,"line_end":3,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":474},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138195,"byte_end":138203,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"StackVec","qualname":"::stackvec::StackVec","value":"StackVec {  }","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":477}],"decl_id":null,"docs":" Simple stack vector implementation.\n","sig":null,"attributes":[{"value":"/ Simple stack vector implementation.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138127,"byte_end":138166,"line_start":9,"line_end":9,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138533,"byte_end":138536,"line_start":22,"line_end":22,"column_start":18,"column_end":21},"name":"new","qualname":"<StackVec>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty vector.\n","sig":null,"attributes":[{"value":"/ Construct an empty vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138471,"byte_end":138501,"line_start":20,"line_end":20,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138506,"byte_end":138515,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138750,"byte_end":138758,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"name":"try_from","qualname":"<StackVec>::try_from","value":"pub fn try_from(&[bigint::Limb]) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a vector from an existing slice.\n","sig":null,"attributes":[{"value":"/ Construct a vector from an existing slice.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138678,"byte_end":138724,"line_start":29,"line_end":29,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138729,"byte_end":138738,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139251,"byte_end":139258,"line_start":47,"line_end":47,"column_start":19,"column_end":26},"name":"set_len","qualname":"<StackVec>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets the length of a vector.","sig":null,"attributes":[{"value":"/ Sets the length of a vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138889,"byte_end":138921,"line_start":37,"line_end":37,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138926,"byte_end":138929,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This will explicitly set the size of the vector, without actually","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138934,"byte_end":139003,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/ modifying its buffers, so it is up to the caller to ensure that the","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139008,"byte_end":139079,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ vector is actually the specified size.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139084,"byte_end":139126,"line_start":41,"line_end":41,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139131,"byte_end":139134,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139139,"byte_end":139151,"line_start":43,"line_end":43,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139156,"byte_end":139159,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Safe as long as `len` is less than `BIGINT_LIMBS`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139164,"byte_end":139218,"line_start":45,"line_end":45,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139223,"byte_end":139232,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139559,"byte_end":139562,"line_start":56,"line_end":56,"column_start":18,"column_end":21},"name":"len","qualname":"<StackVec>::len","value":"pub const fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of elements stored in the vector.\n","sig":null,"attributes":[{"value":"/ The number of elements stored in the vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139479,"byte_end":139527,"line_start":54,"line_end":54,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139532,"byte_end":139541,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139680,"byte_end":139688,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"name":"is_empty","qualname":"<StackVec>::is_empty","value":"pub const fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If the vector is empty.\n","sig":null,"attributes":[{"value":"/ If the vector is empty.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139621,"byte_end":139648,"line_start":60,"line_end":60,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139653,"byte_end":139662,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139817,"byte_end":139825,"line_start":68,"line_end":68,"column_start":18,"column_end":26},"name":"capacity","qualname":"<StackVec>::capacity","value":"pub const fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of items the vector can hold.\n","sig":null,"attributes":[{"value":"/ The number of items the vector can hold.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139741,"byte_end":139785,"line_start":66,"line_end":66,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139790,"byte_end":139799,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140065,"byte_end":140079,"line_start":78,"line_end":78,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<StackVec>::push_unchecked","value":"pub unsafe fn push_unchecked(&mut Self, bigint::Limb)","parent":null,"children":[],"decl_id":null,"docs":" Append an item to the vector, without bounds checking.","sig":null,"attributes":[{"value":"/ Append an item to the vector, without bounds checking.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139893,"byte_end":139951,"line_start":72,"line_end":72,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139956,"byte_end":139959,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139964,"byte_end":139976,"line_start":74,"line_end":74,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139981,"byte_end":139984,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Safe if `self.len() < self.capacity()`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":139989,"byte_end":140032,"line_start":76,"line_end":76,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140037,"byte_end":140046,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140425,"byte_end":140433,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"try_push","qualname":"<StackVec>::try_push","value":"pub fn try_push(&mut Self, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Append an item to the vector.\n","sig":null,"attributes":[{"value":"/ Append an item to the vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140366,"byte_end":140399,"line_start":87,"line_end":87,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140404,"byte_end":140413,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140889,"byte_end":140902,"line_start":105,"line_end":105,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<StackVec>::pop_unchecked","value":"pub unsafe fn pop_unchecked(&mut Self) -> bigint::Limb","parent":null,"children":[],"decl_id":null,"docs":" Remove an item from the end of a vector, without bounds checking.","sig":null,"attributes":[{"value":"/ Remove an item from the end of a vector, without bounds checking.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140720,"byte_end":140789,"line_start":99,"line_end":99,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140794,"byte_end":140797,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140802,"byte_end":140814,"line_start":101,"line_end":101,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140819,"byte_end":140822,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Safe if `self.len() > 0`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140827,"byte_end":140856,"line_start":103,"line_end":103,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":140861,"byte_end":140870,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141285,"byte_end":141288,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"pop","qualname":"<StackVec>::pop","value":"pub fn pop(&mut Self) -> Option<bigint::Limb>","parent":null,"children":[],"decl_id":null,"docs":" Remove an item from the end of the vector and return it, or None if empty.\n","sig":null,"attributes":[{"value":"/ Remove an item from the end of the vector and return it, or None if empty.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141181,"byte_end":141259,"line_start":113,"line_end":113,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141264,"byte_end":141273,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141706,"byte_end":141722,"line_start":130,"line_end":130,"column_start":19,"column_end":35},"name":"extend_unchecked","qualname":"<StackVec>::extend_unchecked","value":"pub unsafe fn extend_unchecked(&mut Self, &[bigint::Limb])","parent":null,"children":[],"decl_id":null,"docs":" Add items from a slice to the vector, without bounds checking.","sig":null,"attributes":[{"value":"/ Add items from a slice to the vector, without bounds checking.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141513,"byte_end":141579,"line_start":124,"line_end":124,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141584,"byte_end":141587,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141592,"byte_end":141604,"line_start":126,"line_end":126,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141609,"byte_end":141612,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Safe if `self.len() + slc.len() <= self.capacity()`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141617,"byte_end":141673,"line_start":128,"line_end":128,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":141678,"byte_end":141687,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142272,"byte_end":142282,"line_start":145,"line_end":145,"column_start":12,"column_end":22},"name":"try_extend","qualname":"<StackVec>::try_extend","value":"pub fn try_extend(&mut Self, &[bigint::Limb]) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Copy elements from a slice and append them to the vector.\n","sig":null,"attributes":[{"value":"/ Copy elements from a slice and append them to the vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142185,"byte_end":142246,"line_start":143,"line_end":143,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142251,"byte_end":142260,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":143057,"byte_end":143073,"line_start":171,"line_end":171,"column_start":19,"column_end":35},"name":"resize_unchecked","qualname":"<StackVec>::resize_unchecked","value":"pub unsafe fn resize_unchecked(&mut Self, usize, bigint::Limb)","parent":null,"children":[],"decl_id":null,"docs":" Resize the buffer, without bounds checking.","sig":null,"attributes":[{"value":"/ Resize the buffer, without bounds checking.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142894,"byte_end":142941,"line_start":165,"line_end":165,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142946,"byte_end":142949,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142954,"byte_end":142966,"line_start":167,"line_end":167,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142971,"byte_end":142974,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Safe as long as `len <= self.capacity()`.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":142979,"byte_end":143024,"line_start":169,"line_end":169,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":143029,"byte_end":143038,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144129,"byte_end":144139,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"try_resize","qualname":"<StackVec>::try_resize","value":"pub fn try_resize(&mut Self, usize, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to resize the buffer.","sig":null,"attributes":[{"value":"/ Try to resize the buffer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":143924,"byte_end":143953,"line_start":194,"line_end":194,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":143958,"byte_end":143961,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ If the new length is smaller than the current length, truncate","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":143966,"byte_end":144032,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/ the input. If it's larger, then append elements to the buffer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144037,"byte_end":144103,"line_start":197,"line_end":197,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144108,"byte_end":144117,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144516,"byte_end":144520,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"hi64","qualname":"<StackVec>::hi64","value":"pub fn hi64(&Self) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Get the high 64 bits from the vector.\n","sig":null,"attributes":[{"value":"/ Get the high 64 bits from the vector.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144441,"byte_end":144482,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144487,"byte_end":144504,"line_start":212,"line_end":212,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144665,"byte_end":144673,"line_start":221,"line_end":221,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<StackVec>::from_u64","value":"pub fn from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create StackVec from u64 value.\n","sig":null,"attributes":[{"value":"/ Create StackVec from u64 value.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144596,"byte_end":144631,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144636,"byte_end":144653,"line_start":220,"line_end":220,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144836,"byte_end":144845,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"normalize","qualname":"<StackVec>::normalize","value":"pub fn normalize(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Normalize the integer, so any leading zero values are removed.\n","sig":null,"attributes":[{"value":"/ Normalize the integer, so any leading zero values are removed.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144744,"byte_end":144810,"line_start":227,"line_end":227,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144815,"byte_end":144824,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144969,"byte_end":144982,"line_start":235,"line_end":235,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<StackVec>::is_normalized","value":"pub fn is_normalized(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get if the big integer is normalized.\n","sig":null,"attributes":[{"value":"/ Get if the big integer is normalized.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144902,"byte_end":144943,"line_start":233,"line_end":233,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":144948,"byte_end":144957,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145101,"byte_end":145110,"line_start":241,"line_end":241,"column_start":12,"column_end":21},"name":"add_small","qualname":"<StackVec>::add_small","value":"pub fn add_small(&mut Self, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" AddAssign small integer.\n","sig":null,"attributes":[{"value":"/ AddAssign small integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145047,"byte_end":145075,"line_start":239,"line_end":239,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145080,"byte_end":145089,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145255,"byte_end":145264,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"mul_small","qualname":"<StackVec>::mul_small","value":"pub fn mul_small(&mut Self, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" MulAssign small integer.\n","sig":null,"attributes":[{"value":"/ MulAssign small integer.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145201,"byte_end":145229,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145234,"byte_end":145243,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":405},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"table","qualname":"::table","value":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table.rs","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"decl_id":null,"docs":" Pre-computed tables for parsing float strings.\n","sig":null,"attributes":[{"value":"/ Pre-computed tables for parsing float strings.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table.rs","byte_start":146862,"byte_end":146912,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":409},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_lemire.rs","byte_start":151748,"byte_end":151770,"line_start":15,"line_end":15,"column_start":11,"column_end":33},"name":"SMALLEST_POWER_OF_FIVE","qualname":"::table_lemire::SMALLEST_POWER_OF_FIVE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":410},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_lemire.rs","byte_start":151794,"byte_end":151815,"line_start":16,"line_end":16,"column_start":11,"column_end":32},"name":"LARGEST_POWER_OF_FIVE","qualname":"::table_lemire::LARGEST_POWER_OF_FIVE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":411},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_lemire.rs","byte_start":151838,"byte_end":151854,"line_start":17,"line_end":17,"column_start":11,"column_end":27},"name":"N_POWERS_OF_FIVE","qualname":"::table_lemire::N_POWERS_OF_FIVE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":480},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_lemire.rs","byte_start":152162,"byte_end":152179,"line_start":24,"line_end":24,"column_start":12,"column_end":29},"name":"POWER_OF_FIVE_128","qualname":"::table_lemire::POWER_OF_FIVE_128","value":"[(u64, u64); ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustfmt::skip","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_lemire.rs","byte_start":152134,"byte_end":152150,"line_start":23,"line_end":23,"column_start":1,"column_end":17}}]},{"kind":"Const","id":{"krate":0,"index":413},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":188307,"byte_end":188321,"line_start":7,"line_end":7,"column_start":11,"column_end":25},"name":"SMALL_INT_POW5","qualname":"::table_small::SMALL_INT_POW5","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-5.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-5.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":188260,"byte_end":188296,"line_start":6,"line_end":6,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":415},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":188835,"byte_end":188850,"line_start":39,"line_end":39,"column_start":11,"column_end":26},"name":"SMALL_INT_POW10","qualname":"::table_small::SMALL_INT_POW10","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-10.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-10.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":188787,"byte_end":188824,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":417},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":189248,"byte_end":189263,"line_start":63,"line_end":63,"column_start":11,"column_end":26},"name":"SMALL_F32_POW10","qualname":"::table_small::SMALL_F32_POW10","value":"[f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-10.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-10.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":189200,"byte_end":189237,"line_start":62,"line_end":62,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":419},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":189408,"byte_end":189423,"line_start":67,"line_end":67,"column_start":11,"column_end":26},"name":"SMALL_F64_POW10","qualname":"::table_small::SMALL_F64_POW10","value":"[f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-10.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-10.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":189360,"byte_end":189397,"line_start":66,"line_end":66,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":421},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":190036,"byte_end":190046,"line_start":81,"line_end":81,"column_start":11,"column_end":21},"name":"LARGE_POW5","qualname":"::table_small::LARGE_POW5","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed large power-of-5 for 64-bit limbs.\n","sig":null,"attributes":[{"value":"/ Pre-computed large power-of-5 for 64-bit limbs.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":189905,"byte_end":189956,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":189957,"byte_end":190025,"line_start":80,"line_end":80,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":423},"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":190248,"byte_end":190263,"line_start":90,"line_end":90,"column_start":11,"column_end":26},"name":"LARGE_POW5_STEP","qualname":"::table_small::LARGE_POW5_STEP","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Step for large power-of-5 for 32-bit limbs.\n","sig":null,"attributes":[{"value":"/ Step for large power-of-5 for 32-bit limbs.","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/table_small.rs","byte_start":190190,"byte_end":190237,"line_start":89,"line_end":89,"column_start":1,"column_end":48}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17823,"byte_end":17829,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18833,"byte_end":18839,"line_start":102,"line_end":102,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19082,"byte_end":19093,"line_start":115,"line_end":115,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109630,"byte_end":109636,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138456,"byte_end":138464,"line_start":19,"line_end":19,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145372,"byte_end":145380,"line_start":252,"line_end":252,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145585,"byte_end":145593,"line_start":261,"line_end":261,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145624,"byte_end":145632,"line_start":264,"line_end":264,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145786,"byte_end":145794,"line_start":271,"line_end":271,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145928,"byte_end":145936,"line_start":278,"line_end":278,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":146327,"byte_end":146335,"line_start":291,"line_end":291,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":146728,"byte_end":146736,"line_start":303,"line_end":303,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1648,"byte_end":1654,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1664,"byte_end":1678,"line_start":48,"line_end":48,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":79}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1718,"byte_end":1724,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":85}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1748,"byte_end":1752,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":116}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1762,"byte_end":1765,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":120}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1775,"byte_end":1781,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":216}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1791,"byte_end":1796,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":225}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1806,"byte_end":1814,"line_start":57,"line_end":57,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":262}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1824,"byte_end":1828,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":282}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1838,"byte_end":1846,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":345}},{"kind":"Mod","span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/lib.rs","byte_start":1856,"byte_end":1861,"line_start":60,"line_end":60,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":405}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":17823,"byte_end":17829,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":18833,"byte_end":18839,"line_start":102,"line_end":102,"column_start":34,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":430},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/bigint.rs","byte_start":19082,"byte_end":19093,"line_start":115,"line_end":115,"column_start":35,"column_end":46},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":38},"to":{"krate":2,"index":3312}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99104,"byte_end":99109,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3021},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99116,"byte_end":99120,"line_start":20,"line_end":20,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3026},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99127,"byte_end":99136,"line_start":21,"line_end":21,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2667},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99143,"byte_end":99153,"line_start":22,"line_end":22,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2714},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99160,"byte_end":99164,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99171,"byte_end":99175,"line_start":24,"line_end":24,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3028},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99187,"byte_end":99190,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3083},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99217,"byte_end":99226,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3114},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99238,"byte_end":99241,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3098},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99268,"byte_end":99277,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3126},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99289,"byte_end":99292,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3093},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99319,"byte_end":99328,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3122},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99340,"byte_end":99343,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3104},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99370,"byte_end":99379,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3130},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99391,"byte_end":99394,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3088},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99421,"byte_end":99430,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3118},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/num.rs","byte_start":99442,"byte_end":99445,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3110},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/number.rs","byte_start":109630,"byte_end":109636,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":138456,"byte_end":138464,"line_start":19,"line_end":19,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145372,"byte_end":145380,"line_start":252,"line_end":252,"column_start":20,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":2667}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145585,"byte_end":145593,"line_start":261,"line_end":261,"column_start":13,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":2672}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145624,"byte_end":145632,"line_start":264,"line_end":264,"column_start":26,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145786,"byte_end":145794,"line_start":271,"line_end":271,"column_start":19,"column_end":27},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":2703}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":145928,"byte_end":145936,"line_start":278,"line_end":278,"column_start":21,"column_end":29},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":146327,"byte_end":146335,"line_start":291,"line_end":291,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":3240}},{"span":{"file_name":"/Users/limaohui/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.2.1/src/stackvec.rs","byte_start":146728,"byte_end":146736,"line_start":303,"line_end":303,"column_start":42,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":3122}}]}